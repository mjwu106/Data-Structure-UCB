1a. Results for InsertRandomSpeedTest for N = 1000000:
BSTStringSet: 0.38 s
ECHashStringSet: 2.34 s
TreeSet: 2.43 s
HashSet: 0.97 s

1b. Results for InsertRandomSpeedTest for N = 2000000:
BSTStringSet: 0.67 s
ECHashStringSet: 4.97 s
TreeSet: 5,44 s
HashSet: 1.99 s

1c. Does your ECHashStringSet look roughly linear or roughly quadratic
in its scaling behavior for random strings?
It looks linear as it takes twice amount of the time when the sample size is double



2a. Results for InsertInOrderSpeedTest for N = 10000:
BSTStringSet: 0.08 s
ECHashStringSet: 0.06 s
TreeSet: 0.03 s
HashSet: 0.01 s

2b. Results for InsertInOrderSpeedTest for N = 20000:
BSTStringSet: 0.12 s
ECHashStringSet: 0.06 s
TreeSet: 0.08 s
HashSet: 0.05 s

2c. Does your **BST**StringSet look roughly linear or roughly
quadratic in its scaling behavior for in order strings?
It still looks roughly linear.

Before submitting, make sure that your ECHashStringSet is capable of
handling inputs of size 1000000 in a reasonable amount of time (a few
seconds).

