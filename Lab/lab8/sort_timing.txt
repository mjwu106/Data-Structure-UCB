Q: Is one sorting algorithm always faster than another?
A: From the graph, one could see that no sorting algorithm is always faster than others.

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: The three are in the same group of time complexity but this does not mean they have the same running time. They could have very different upper and lower bounds and their run times could vary quite siginificantly depending on the input data.

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A: From empirical analysis of algorithms, one could tell which which algorithms are faster and slower.  

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A: Not necessary. For example, if the algorithm has a complexity of theta(1), and then arrazy size won't affect the runtime.

Q: How does changing nrepeats change the plot?
A: The graph looks more accurate and smoother

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: My partner does not exist (at least in this universe)

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: